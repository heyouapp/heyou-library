var _interopRequireWildcard=require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports,"__esModule",{value:true});exports.SnapError=void 0;var React=_interopRequireWildcard(require("react"));var _reactNative=require("react-native");var _core=require("../core");var _utils=require("../../utils");var _jsxFileName="/Users/juanmanuelcb/Projects/Heyou/Library/src/components/structure/SnapError.tsx";var SnapError=function SnapError(props){return React.createElement(_reactNative.SafeAreaView,{style:[styles.container,_reactNative.Platform.OS!=='web'?styles.container_mobile:styles.container_web],__source:{fileName:_jsxFileName,lineNumber:15}},React.createElement(_reactNative.View,{style:styles.content,__source:{fileName:_jsxFileName,lineNumber:23}},React.createElement(_core.Text,{type:"semibold",style:styles.text,__source:{fileName:_jsxFileName,lineNumber:24}},props.message),React.createElement(_core.Button,{type:"secondary",position:"end",small:true,onPress:props.onClose,style:styles.button,__source:{fileName:_jsxFileName,lineNumber:27}},props.closeText||'OK')));};exports.SnapError=SnapError;var styles=_reactNative.StyleSheet.create({container:{backgroundColor:_utils.Colors.error},container_mobile:{position:'absolute',top:0,left:0,right:0,zIndex:10},container_web:{borderRadius:15},content:{padding:15},text:{marginBottom:10,color:_utils.Colors.white},button:{borderColor:'transparent'}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3N0cnVjdHVyZS9TbmFwRXJyb3IudHN4Il0sIm5hbWVzIjpbIlNuYXBFcnJvciIsInByb3BzIiwic3R5bGVzIiwiY29udGFpbmVyIiwiUGxhdGZvcm0iLCJPUyIsImNvbnRhaW5lcl9tb2JpbGUiLCJjb250YWluZXJfd2ViIiwiY29udGVudCIsInRleHQiLCJtZXNzYWdlIiwib25DbG9zZSIsImJ1dHRvbiIsImNsb3NlVGV4dCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJDb2xvcnMiLCJlcnJvciIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInJpZ2h0IiwiekluZGV4IiwiYm9yZGVyUmFkaXVzIiwicGFkZGluZyIsIm1hcmdpbkJvdHRvbSIsImNvbG9yIiwid2hpdGUiLCJib3JkZXJDb2xvciJdLCJtYXBwaW5ncyI6InVLQUFBLG9EQUNBLHlDQUdBLDZCQUNBLGtDLHFHQVFBLEdBQU1BLENBQUFBLFNBQVMsQ0FBRyxRQUFaQSxDQUFBQSxTQUFZLENBQUNDLEtBQUQsUUFDZCxxQkFBQyx5QkFBRCxFQUNJLEtBQUssQ0FBRSxDQUNIQyxNQUFNLENBQUNDLFNBREosQ0FFSEMsc0JBQVNDLEVBQVQsR0FBZ0IsS0FBaEIsQ0FDTUgsTUFBTSxDQUFDSSxnQkFEYixDQUVNSixNQUFNLENBQUNLLGFBSlYsQ0FEWCxpREFRSSxvQkFBQyxpQkFBRCxFQUFNLEtBQUssQ0FBRUwsTUFBTSxDQUFDTSxPQUFwQixpREFDSSxvQkFBQyxVQUFELEVBQU0sSUFBSSxDQUFDLFVBQVgsQ0FBc0IsS0FBSyxDQUFFTixNQUFNLENBQUNPLElBQXBDLGlEQUNLUixLQUFLLENBQUNTLE9BRFgsQ0FESixDQUlJLG9CQUFDLFlBQUQsRUFDSSxJQUFJLENBQUMsV0FEVCxDQUVJLFFBQVEsQ0FBQyxLQUZiLENBR0ksS0FBSyxLQUhULENBSUksT0FBTyxDQUFFVCxLQUFLLENBQUNVLE9BSm5CLENBS0ksS0FBSyxDQUFFVCxNQUFNLENBQUNVLE1BTGxCLGlEQU9LWCxLQUFLLENBQUNZLFNBQU4sRUFBbUIsSUFQeEIsQ0FKSixDQVJKLENBRGMsRUFBbEIsQyw0QkEwQkEsR0FBTVgsQ0FBQUEsTUFBTSxDQUFHWSx3QkFBV0MsTUFBWCxDQUFrQixDQUM3QlosU0FBUyxDQUFFLENBQ1BhLGVBQWUsQ0FBRUMsY0FBT0MsS0FEakIsQ0FEa0IsQ0FJN0JaLGdCQUFnQixDQUFFLENBQ2RhLFFBQVEsQ0FBRSxVQURJLENBRWRDLEdBQUcsQ0FBRSxDQUZTLENBR2RDLElBQUksQ0FBRSxDQUhRLENBSWRDLEtBQUssQ0FBRSxDQUpPLENBS2RDLE1BQU0sQ0FBRSxFQUxNLENBSlcsQ0FXN0JoQixhQUFhLENBQUUsQ0FDWGlCLFlBQVksQ0FBRSxFQURILENBWGMsQ0FjN0JoQixPQUFPLENBQUUsQ0FDTGlCLE9BQU8sQ0FBRSxFQURKLENBZG9CLENBaUI3QmhCLElBQUksQ0FBRSxDQUNGaUIsWUFBWSxDQUFFLEVBRFosQ0FFRkMsS0FBSyxDQUFFVixjQUFPVyxLQUZaLENBakJ1QixDQXFCN0JoQixNQUFNLENBQUUsQ0FDSmlCLFdBQVcsQ0FBRSxhQURULENBckJxQixDQUFsQixDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgU2FmZUFyZWFWaWV3LCBWaWV3LCBQbGF0Zm9ybSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbi8vIExpYnJhcnlcbmltcG9ydCB7IFRleHQsIEJ1dHRvbiB9IGZyb20gJ2NvbXBvbmVudHMvY29yZSc7XG5pbXBvcnQgeyBDb2xvcnMgfSBmcm9tICd1dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU25hcEVycm9yUHJvcHMge1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICBjbG9zZVRleHQ/OiBzdHJpbmc7XG4gICAgb25DbG9zZTogKCkgPT4gdm9pZDtcbn1cblxuY29uc3QgU25hcEVycm9yID0gKHByb3BzOiBTbmFwRXJyb3JQcm9wcykgPT4gKFxuICAgIDxTYWZlQXJlYVZpZXdcbiAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgIHN0eWxlcy5jb250YWluZXIsXG4gICAgICAgICAgICBQbGF0Zm9ybS5PUyAhPT0gJ3dlYidcbiAgICAgICAgICAgICAgICA/IHN0eWxlcy5jb250YWluZXJfbW9iaWxlXG4gICAgICAgICAgICAgICAgOiBzdHlsZXMuY29udGFpbmVyX3dlYixcbiAgICAgICAgXX1cbiAgICA+XG4gICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGVudH0+XG4gICAgICAgICAgICA8VGV4dCB0eXBlPVwic2VtaWJvbGRcIiBzdHlsZT17c3R5bGVzLnRleHR9PlxuICAgICAgICAgICAgICAgIHtwcm9wcy5tZXNzYWdlfVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIHR5cGU9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgIHBvc2l0aW9uPVwiZW5kXCJcbiAgICAgICAgICAgICAgICBzbWFsbFxuICAgICAgICAgICAgICAgIG9uUHJlc3M9e3Byb3BzLm9uQ2xvc2V9XG4gICAgICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5idXR0b259XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3Byb3BzLmNsb3NlVGV4dCB8fCAnT0snfVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvVmlldz5cbiAgICA8L1NhZmVBcmVhVmlldz5cbik7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBjb250YWluZXI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMuZXJyb3IsXG4gICAgfSxcbiAgICBjb250YWluZXJfbW9iaWxlOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICB6SW5kZXg6IDEwLFxuICAgIH0sXG4gICAgY29udGFpbmVyX3dlYjoge1xuICAgICAgICBib3JkZXJSYWRpdXM6IDE1LFxuICAgIH0sXG4gICAgY29udGVudDoge1xuICAgICAgICBwYWRkaW5nOiAxNSxcbiAgICB9LFxuICAgIHRleHQ6IHtcbiAgICAgICAgbWFyZ2luQm90dG9tOiAxMCxcbiAgICAgICAgY29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICB9LFxuICAgIGJ1dHRvbjoge1xuICAgICAgICBib3JkZXJDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICB9LFxufSk7XG5cbmV4cG9ydCB7IFNuYXBFcnJvciB9O1xuIl19