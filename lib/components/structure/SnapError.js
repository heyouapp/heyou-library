var _interopRequireWildcard=require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports,"__esModule",{value:true});exports.SnapError=void 0;var React=_interopRequireWildcard(require("react"));var _reactNative=require("react-native");var _core=require("../core");var _utils=require("../../utils");var _jsxFileName="/Users/juanmanuelcb/Projects/Heyou/Library/src/components/structure/SnapError.tsx";var SnapError=function SnapError(props){return React.createElement(_reactNative.SafeAreaView,{style:[styles.container,_reactNative.Platform.OS==='web'?styles.container_web:styles.container_mobile],__source:{fileName:_jsxFileName,lineNumber:15}},React.createElement(_reactNative.View,{style:styles.content,__source:{fileName:_jsxFileName,lineNumber:23}},React.createElement(_core.Text,{type:"semibold",style:styles.text,__source:{fileName:_jsxFileName,lineNumber:24}},props.message),React.createElement(_core.Button,{type:"secondary",position:"end",small:true,onPress:props.onClose,style:styles.button,__source:{fileName:_jsxFileName,lineNumber:27}},props.closeText||'OK')));};exports.SnapError=SnapError;var styles=_reactNative.StyleSheet.create({container:{backgroundColor:_utils.Colors.error},container_mobile:{position:'absolute',top:0,left:0,right:0,zIndex:10},container_web:{borderRadius:15},content:{padding:15},text:{marginBottom:10,color:_utils.Colors.white},button:{borderColor:'transparent'}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3N0cnVjdHVyZS9TbmFwRXJyb3IudHN4Il0sIm5hbWVzIjpbIlNuYXBFcnJvciIsInByb3BzIiwic3R5bGVzIiwiY29udGFpbmVyIiwiUGxhdGZvcm0iLCJPUyIsImNvbnRhaW5lcl93ZWIiLCJjb250YWluZXJfbW9iaWxlIiwiY29udGVudCIsInRleHQiLCJtZXNzYWdlIiwib25DbG9zZSIsImJ1dHRvbiIsImNsb3NlVGV4dCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJDb2xvcnMiLCJlcnJvciIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInJpZ2h0IiwiekluZGV4IiwiYm9yZGVyUmFkaXVzIiwicGFkZGluZyIsIm1hcmdpbkJvdHRvbSIsImNvbG9yIiwid2hpdGUiLCJib3JkZXJDb2xvciJdLCJtYXBwaW5ncyI6InVLQUFBLG9EQUNBLHlDQUdBLDZCQUNBLGtDLHFHQVFBLEdBQU1BLENBQUFBLFNBQW1DLENBQUcsUUFBdENBLENBQUFBLFNBQXNDLENBQUFDLEtBQUssUUFDN0MscUJBQUMseUJBQUQsRUFDSSxLQUFLLENBQUUsQ0FDSEMsTUFBTSxDQUFDQyxTQURKLENBRUhDLHNCQUFTQyxFQUFULEdBQWdCLEtBQWhCLENBQ01ILE1BQU0sQ0FBQ0ksYUFEYixDQUVNSixNQUFNLENBQUNLLGdCQUpWLENBRFgsaURBUUksb0JBQUMsaUJBQUQsRUFBTSxLQUFLLENBQUVMLE1BQU0sQ0FBQ00sT0FBcEIsaURBQ0ksb0JBQUMsVUFBRCxFQUFNLElBQUksQ0FBQyxVQUFYLENBQXNCLEtBQUssQ0FBRU4sTUFBTSxDQUFDTyxJQUFwQyxpREFDS1IsS0FBSyxDQUFDUyxPQURYLENBREosQ0FJSSxvQkFBQyxZQUFELEVBQ0ksSUFBSSxDQUFDLFdBRFQsQ0FFSSxRQUFRLENBQUMsS0FGYixDQUdJLEtBQUssS0FIVCxDQUlJLE9BQU8sQ0FBRVQsS0FBSyxDQUFDVSxPQUpuQixDQUtJLEtBQUssQ0FBRVQsTUFBTSxDQUFDVSxNQUxsQixpREFPS1gsS0FBSyxDQUFDWSxTQUFOLEVBQW1CLElBUHhCLENBSkosQ0FSSixDQUQ2QyxFQUFqRCxDLDRCQTBCQSxHQUFNWCxDQUFBQSxNQUFNLENBQUdZLHdCQUFXQyxNQUFYLENBQWtCLENBQzdCWixTQUFTLENBQUUsQ0FDUGEsZUFBZSxDQUFFQyxjQUFPQyxLQURqQixDQURrQixDQUk3QlgsZ0JBQWdCLENBQUUsQ0FDZFksUUFBUSxDQUFFLFVBREksQ0FFZEMsR0FBRyxDQUFFLENBRlMsQ0FHZEMsSUFBSSxDQUFFLENBSFEsQ0FJZEMsS0FBSyxDQUFFLENBSk8sQ0FLZEMsTUFBTSxDQUFFLEVBTE0sQ0FKVyxDQVc3QmpCLGFBQWEsQ0FBRSxDQUNYa0IsWUFBWSxDQUFFLEVBREgsQ0FYYyxDQWM3QmhCLE9BQU8sQ0FBRSxDQUNMaUIsT0FBTyxDQUFFLEVBREosQ0Fkb0IsQ0FpQjdCaEIsSUFBSSxDQUFFLENBQ0ZpQixZQUFZLENBQUUsRUFEWixDQUVGQyxLQUFLLENBQUVWLGNBQU9XLEtBRlosQ0FqQnVCLENBcUI3QmhCLE1BQU0sQ0FBRSxDQUNKaUIsV0FBVyxDQUFFLGFBRFQsQ0FyQnFCLENBQWxCLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBTYWZlQXJlYVZpZXcsIFZpZXcsIFBsYXRmb3JtIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuLy8gTGlicmFyeVxuaW1wb3J0IHsgVGV4dCwgQnV0dG9uIH0gZnJvbSAnY29tcG9uZW50cy9jb3JlJztcbmltcG9ydCB7IENvbG9ycyB9IGZyb20gJ3V0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBTbmFwRXJyb3JQcm9wcyB7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIGNsb3NlVGV4dD86IHN0cmluZztcbiAgICBvbkNsb3NlOiAoKSA9PiB2b2lkO1xufVxuXG5jb25zdCBTbmFwRXJyb3I6IFJlYWN0LkZDPFNuYXBFcnJvclByb3BzPiA9IHByb3BzID0+IChcbiAgICA8U2FmZUFyZWFWaWV3XG4gICAgICAgIHN0eWxlPXtbXG4gICAgICAgICAgICBzdHlsZXMuY29udGFpbmVyLFxuICAgICAgICAgICAgUGxhdGZvcm0uT1MgPT09ICd3ZWInXG4gICAgICAgICAgICAgICAgPyBzdHlsZXMuY29udGFpbmVyX3dlYlxuICAgICAgICAgICAgICAgIDogc3R5bGVzLmNvbnRhaW5lcl9tb2JpbGUsXG4gICAgICAgIF19XG4gICAgPlxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PlxuICAgICAgICAgICAgPFRleHQgdHlwZT1cInNlbWlib2xkXCIgc3R5bGU9e3N0eWxlcy50ZXh0fT5cbiAgICAgICAgICAgICAgICB7cHJvcHMubWVzc2FnZX1cbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICB0eXBlPVwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbj1cImVuZFwiXG4gICAgICAgICAgICAgICAgc21hbGxcbiAgICAgICAgICAgICAgICBvblByZXNzPXtwcm9wcy5vbkNsb3NlfVxuICAgICAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuYnV0dG9ufVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtwcm9wcy5jbG9zZVRleHQgfHwgJ09LJ31cbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8L1ZpZXc+XG4gICAgPC9TYWZlQXJlYVZpZXc+XG4pO1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgY29udGFpbmVyOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogQ29sb3JzLmVycm9yLFxuICAgIH0sXG4gICAgY29udGFpbmVyX21vYmlsZToge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgekluZGV4OiAxMCxcbiAgICB9LFxuICAgIGNvbnRhaW5lcl93ZWI6IHtcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAxNSxcbiAgICB9LFxuICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgcGFkZGluZzogMTUsXG4gICAgfSxcbiAgICB0ZXh0OiB7XG4gICAgICAgIG1hcmdpbkJvdHRvbTogMTAsXG4gICAgICAgIGNvbG9yOiBDb2xvcnMud2hpdGUsXG4gICAgfSxcbiAgICBidXR0b246IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBTbmFwRXJyb3IgfTtcbiJdfQ==